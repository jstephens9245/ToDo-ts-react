import React from 'react';
import { withRouter } from "react-router-dom";
let CryptoJS = require("crypto-js");

const NewSRResults = (match:any) => {

    // const newVal = "2iPVReniN+3GQJRoYtlszYHSmAOHcNqvY9ucZobGnSw=";
    // const longVal = "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"

    let decrypted = "No data"
    if (match.match.params.data) {
        try {
            const incomingData = decodeURIComponent(match.match.params.data)
            const iv = CryptoJS.enc.Utf8.parse("encryptionIntVec")
            const cryptkey = CryptoJS.enc.Utf8.parse('aesEncryptionKey')
            decrypted = CryptoJS.AES.decrypt(incomingData, cryptkey, {
                iv: iv,
                format: CryptoJS.format.Hex
            })
            //@ts-ignore
            decrypted = decrypted.toString(CryptoJS.enc.Utf8)
        } catch(e) {
            decrypted = "Error parsing input: "+e
        }

    }


    return <><h3 style={{padding:"2rem"}}>Result:</h3><div style={{padding:"2rem"}}>{decrypted ? decrypted : "No data"}</div></>
}
export default withRouter(NewSRResults)
